‚ùå 1. As mensagens com tempId est√£o sendo adicionadas, mas n√£o est√£o sendo substitu√≠das pela oficial

Voc√™ pode ver que:

    Aparecem dois bal√µes: um com ‚è≥ (pending) e outro igual, mas j√° sem status.

    No console, temos logs como:

    MENSAGEM TEMPOR√ÅRIA ADICIONADA: e7101f15-...
    MENSAGEM TEMPOR√ÅRIA ADICIONADA: 32f144d6-...

    Isso indica que as mensagens est√£o sendo adicionadas sempre, n√£o substitu√≠das.

‚ùå 2. Nenhum log de substitui√ß√£o aparece

Voc√™ precisa ver algo como:

üîÑ Substituindo mensagem tempId=e7101f15... por id=509026e5-...

‚úÖ O que voc√™ precisa revisar no seu c√≥digo:
1. Na fun√ß√£o sendMessage(), quando adiciona a mensagem local:

const tempId = crypto.randomUUID();
const tempMessage = {
  id: tempId,
  tempId, // üëà importante
  content: message,
  status: 'pending',
  timestamp: new Date().toISOString(),
  direction: 'sent',
};

2. Na fun√ß√£o que processa mensagens recebidas via WebSocket:

Adicione a l√≥gica de substitui√ß√£o com cuidado:

if (data.direction === 'sent' && data.id && data.timestamp) {
  const instanceMessages = messagesByInstance[instanceKey]?.[phoneNumber] || [];

  const tempIndex = instanceMessages.findIndex(msg =>
    msg.tempId && msg.content === data.content &&
    Math.abs(new Date(msg.timestamp).getTime() - new Date(data.timestamp).getTime()) < 5000
  );

  if (tempIndex !== -1) {
    console.log(`üîÑ Substituindo mensagem tempId=${instanceMessages[tempIndex].tempId} por id=${data.id}`);
    instanceMessages[tempIndex] = {
      ...data,
      status: 'sent',
    };
  } else {
    console.warn("‚ö†Ô∏è Mensagem oficial recebida, mas n√£o foi poss√≠vel encontrar uma tempor√°ria para substituir.");
    instanceMessages.push({
      ...data,
      status: 'sent',
    });
  }

  setMessagesByInstance(prev => ({
    ...prev,
    [instanceKey]: {
      ...prev[instanceKey],
      [phoneNumber]: [...instanceMessages],
    },
  }));
}

3. Renderiza√ß√£o condicional do status no chat:

Garanta que voc√™ est√° lendo message.status === 'pending' para ‚è≥, sent para ‚úì etc.
‚úçÔ∏è Prompt para sua IA (se quiser que ela revise isso):

    O sistema est√° gerando mensagens duplicadas porque n√£o substitui corretamente mensagens locais tempor√°rias (com tempId) pelas oficiais recebidas via WebSocket. Implemente um mecanismo que:

        Gera tempId e adiciona a mensagem com status pending ao enviar.

        Quando a mesma mensagem chega via WebSocket, identifica-a usando:

        content igual

        diferen√ßa de timestamp < 5 segundos

        direction: 'sent'

        substitui a mensagem tempor√°ria pela oficial.

        Atualiza o status para sent e remove a tempId.

        Se n√£o encontrar a tempor√°ria, adiciona como nova (fallback).

    Adicione logs detalhados para cada etapa.