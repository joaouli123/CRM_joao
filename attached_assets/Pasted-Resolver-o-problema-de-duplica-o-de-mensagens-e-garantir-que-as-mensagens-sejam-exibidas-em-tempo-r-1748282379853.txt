Resolver o problema de duplica√ß√£o de mensagens e garantir que as mensagens sejam exibidas em tempo real sem a necessidade de atualizar a p√°gina. A IA deve usar a documenta√ß√£o da Evolution API e fazer ajustes na l√≥gica de WebSocket e nos endpoints da API.
Passo 1: Conex√£o WebSocket e Configura√ß√£o

    Configura√ß√£o do WebSocket:

        O WebSocket precisa ser configurado corretamente para ouvir eventos em tempo real.

        Usar o endpoint set-websocket da Evolution API para garantir que o WebSocket seja inicializado corretamente para a inst√¢ncia ativa.

        Assegure que a vari√°vel de ambiente WEBSOCKET_ENABLED=true esteja configurada corretamente para permitir a comunica√ß√£o via WebSocket.

    Monitoramento do Status do WebSocket:

        Usar o endpoint find-websocket para monitorar o status do WebSocket e garantir que a conex√£o esteja ativa e sem falhas.

Passo 2: Identifica√ß√£o e Tratamento das Mensagens

    Evitar Duplica√ß√£o de Mensagens:

        Certifique-se de que as mensagens enviadas e recebidas n√£o se repitam na interface.

        Modifique o c√≥digo que define as chaves das mensagens no React, passando de key={message.id || index} para algo mais robusto como:

        key={`msg-${message.id}-${message.direction}-${message.timestamp}-${index}`}

        Isso assegura que a chave seja √∫nica para cada mensagem, mesmo que o conte√∫do seja igual.

    Verifica√ß√£o de Mensagens Duplicadas via WebSocket:

        Implemente uma l√≥gica que verifica o conte√∫do, ID, dire√ß√£o e timestamp da mensagem antes de adicion√°-la ao estado. Se a mensagem j√° estiver presente, ela n√£o deve ser adicionada novamente.

        Utilize uma janela de 2 segundos para verificar se a mensagem foi recebida dentro desse intervalo, evitando duplica√ß√µes causadas por sincroniza√ß√£o de tempo.

Passo 3: Sincroniza√ß√£o em Tempo Real

    Atualiza√ß√£o Autom√°tica do Estado com WebSocket:

        Ao receber uma mensagem via WebSocket, a l√≥gica deve atualizar o estado do React automaticamente para refletir a nova mensagem no chat ativo, sem que o usu√°rio precise atualizar a p√°gina ou trocar de conversa.

        O estado deve ser atualizado utilizando algo como setMessagesByInstance, o que garante que as mensagens ser√£o corretamente renderizadas na interface sem a necessidade de uma atualiza√ß√£o manual.

        Certifique-se de que a mensagem seja inserida apenas no chat ativo, o que pode ser garantido verificando se o phoneNumber da mensagem √© igual ao n√∫mero do chat selecionado (selectedConversation).

    Envio de Mensagens:

        Para enviar mensagens, use o endpoint send-message da API da Evolution para garantir que as mensagens enviadas sejam processadas corretamente.

        Ap√≥s o envio, a interface deve refletir a mensagem no chat ativo sem duplica√ß√£o.

Passo 4: Recupera√ß√£o de Dados e Sincroniza√ß√£o de Chats

    Obter Chats Ativos:

        Use o endpoint find-chats para obter a lista de chats dispon√≠veis e garantir que o chat ativo seja identificado corretamente.

        Ao abrir um chat, o sistema deve carregar todas as mensagens j√° enviadas e recebidas para esse chat, garantindo que o hist√≥rico esteja sempre atualizado.

    Sincroniza√ß√£o de Mensagens:

        Use o endpoint find-messages para obter o hist√≥rico completo de mensagens sempre que um chat for aberto, especialmente se a aplica√ß√£o for reiniciada ou se houver algum atraso na exibi√ß√£o das mensagens.

    Fotos de Perfil:

        Use o endpoint fetch-profilepic-url para carregar e exibir as fotos de perfil dos contatos sempre que um chat for aberto ou quando uma nova mensagem for recebida.

Passo 5: Detalhamento e Logs

    Adicionar Logs Detalhados:

        Implemente logs para cada evento importante, como a conex√£o ao WebSocket, o recebimento de novas mensagens, e a atualiza√ß√£o do estado.

        Por exemplo:

        console.log('üîå Conectando WebSocket para chat 554187038339...');
        console.log('üü¢ WebSocket conectado para 554187038339!');
        console.log('üî• Mensagem WebSocket recebida para 554187038339: sua mensagem');
        console.log('‚úÖ Nova mensagem recebida adicionada para 554187038339: sua mensagem');

    Evitar Erros de WebSocket:

        Garanta que o WebSocket esteja fechado corretamente ao mudar de chat ou ao desconectar. O c√≥digo deve gerenciar corretamente a abertura e o fechamento das conex√µes WebSocket.

Passo 6: Testes e Valida√ß√£o

    Testar Atualiza√ß√£o em Tempo Real:

        Ap√≥s implementar as mudan√ßas, abra o chat "Joao Lucas" e envie uma mensagem.

        A mensagem deve aparecer instantaneamente na interface sem duplica√ß√£o.

        Verifique se a mensagem aparece corretamente quando a resposta do seu celular for recebida. O sistema deve processar e exibir a mensagem imediatamente.

    Testar com Diferentes Mensagens:

        Envie mensagens de diferentes contatos e garanta que o hist√≥rico de mensagens seja sempre carregado corretamente ao abrir um chat.

        Verifique se as mensagens enviadas e recebidas est√£o sincronizadas sem problemas.