Voc√™ precisa corrigir o c√≥digo para garantir que as fotos dos contatos sejam exibidas corretamente nas conversas arquivadas. Atualmente, a imagem de usu√°rio gen√©rico est√° sendo exibida em vez da foto real do contato.
‚úÖ A√ß√£o Requerida:

    Verifique a URL da Foto do Contato:

        A API j√° est√° retornando a URL da foto do contato no campo photo.

        Certifique-se de que a URL da foto seja v√°lida e acess√≠vel.

        Caso a URL da foto seja inv√°lida ou n√£o esteja sendo retornada, deve-se garantir que um fallback (foto padr√£o) seja usado.

    Corrigir a Exibi√ß√£o da Imagem:

        Exibir a foto real do contato na interface de conversas arquivadas, em vez do √≠cone padr√£o de usu√°rio.

        Quando a foto do contato n√£o estiver dispon√≠vel (ou a URL n√£o for v√°lida), exibir uma foto de fallback (como um √≠cone gen√©rico ou imagem padr√£o).

    Verifique o C√≥digo no Frontend:

        A seguir, um exemplo de c√≥digo para exibir corretamente as fotos dos contatos ou usar a foto de fallback.

C√≥digo de Exibi√ß√£o das Fotos:

Aqui est√° como voc√™ pode modificar o React para exibir as fotos corretamente:

import React, { useState, useEffect } from 'react';

const ArchivedChats = ({ connectionId }) => {
  const [chats, setChats] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState('');

  useEffect(() => {
    const fetchArchivedChats = async () => {
      try {
        const response = await fetch(`/api/connections/${connectionId}/archived-chats`);
        if (response.ok) {
          const data = await response.json();
          setChats(data.chats);
        } else {
          throw new Error('Failed to fetch archived chats');
        }
      } catch (error) {
        setError(error.message);
      } finally {
        setLoading(false);
      }
    };

    fetchArchivedChats();
  }, [connectionId]);

  if (loading) return <div>Loading...</div>;
  if (error) return <div>Error: {error}</div>;

  return (
    <div className="archived-chats">
      <h3>Archived Chats</h3>
      {chats.map((chat) => (
        <div key={chat.contact_phone} className="chat-item">
          {/* Exibe a foto do contato */}
          <img 
            src={chat.photo || 'https://example.com/default-avatar.jpg'} 
            alt={`${chat.contact_name}'s photo`} 
            className="contact-photo"
          />
          
          <div className="contact-info">
            <h3>{chat.contact_name}</h3>
            <p>{chat.contact_phone}</p>
          </div>
          
          <div className="last-message">
            <p>{chat.messages[chat.messages.length - 1].content}</p>
          </div>
          
          <button>Unarchive</button>
          <button>Delete</button>
        </div>
      ))}
    </div>
  );
};

export default ArchivedChats;

üñºÔ∏è Imagem de Fallback (Caso a Foto N√£o Seja Encontrada):

Caso a foto do contato n√£o esteja dispon√≠vel, use uma imagem de fallback. Isso pode ser um √≠cone gen√©rico de "usu√°rio" ou qualquer imagem padr√£o.

Exemplo de fallback:

<img 
  src={chat.photo || 'https://example.com/default-avatar.jpg'} 
  alt={`${chat.contact_name}'s photo`} 
  className="contact-photo"
/>

O link 'https://example.com/default-avatar.jpg' pode ser substitu√≠do por qualquer imagem gen√©rica que voc√™ queira exibir quando o contato n√£o tiver foto.
‚úÖ Verifica√ß√µes Necess√°rias:

    Validar URL da Foto:

        Certifique-se de que a API est√° fornecendo URLs v√°lidas de fotos. A API j√° deve retornar uma URL p√∫blica acess√≠vel que pode ser usada diretamente no frontend.

    Testar a Exibi√ß√£o das Fotos:

        Verifique no Replit se as fotos est√£o sendo carregadas corretamente para todos os contatos.

        Se n√£o houver foto dispon√≠vel, a foto padr√£o (fallback) deve ser exibida automaticamente.

‚úÖ Conclus√£o

Com essas modifica√ß√µes, a IA deve ser capaz de corrigir o problema das fotos dos contatos sendo exibidas como √≠cones padr√£o de usu√°rio, e as fotos reais dos contatos ser√£o mostradas adequadamente na interface.

Se a IA precisar de mais contexto sobre como recuperar ou validar as fotos do backend, posso ajud√°-lo a ajustar o c√≥digo da API ou a l√≥gica de verifica√ß√£o.