Objetivo: Criar uma implementa√ß√£o de mensagens em tempo real usando WebSocket, garantindo que as mensagens recebidas sejam mostradas instantaneamente no chat, sem a necessidade de atualizar a p√°gina ou trocar de conversa. Al√©m disso, adicionar o recurso de exibir a mensagem "digitando..." para o contato enquanto ele estiver digitando.

Requisitos:

    WebSocket para tempo real: O WebSocket deve ser configurado para ouvir novas mensagens e atualiz√°-las instantaneamente no chat.

    Atualiza√ß√£o do estado: Quando uma nova mensagem for recebida, o estado do React (setMessages) deve ser atualizado imediatamente.

    Mensagem "Digitando...": Quando o contato come√ßar a digitar, a interface deve mostrar "Digitando..." de forma eficiente.

    Preven√ß√£o de duplica√ß√£o: A duplica√ß√£o de mensagens deve ser evitada verificando o ID √∫nico da mensagem.

    Exibi√ß√£o instant√¢nea de mensagens: Assim que a mensagem √© recebida, ela deve ser adicionada ao estado e imediatamente refletida na interface sem precisar trocar de conversa ou atualizar a p√°gina.

Passo a Passo:

    Configura√ß√£o do WebSocket:

        Quando o chat √© selecionado, conecte o WebSocket √† API Evolution.

        Escute eventos de novas mensagens e de "digitando...".

        Atualize o estado do React (setMessages) com as mensagens recebidas.

    Evitar duplica√ß√£o de mensagens:

        Verifique se a mensagem j√° existe no estado (currentMessages) antes de adicionar uma nova. Use o message.id para garantir que n√£o haja duplica√ß√µes.

    For√ßar atualiza√ß√£o da interface:

        Quando o WebSocket receber uma mensagem nova, altere o estado do React para garantir que a interface seja re-renderizada imediatamente.

        Quando o contato estiver digitando, mostre o status "digitando..." na interface.

    Mostrar as mensagens:

        Cada mensagem deve ser exibida com o status "enviando" enquanto est√° sendo enviada e "enviada" assim que for confirmada como recebida.

        Para mensagens recebidas, marque-as como "recebidas".

Exemplo de c√≥digo (React):

import React, { useState, useEffect } from "react";

// Estado para armazenar mensagens
const [messages, setMessages] = useState<any[]>([]);

// Estado para o WebSocket
const [webSocket, setWebSocket] = useState<WebSocket | null>(null);
const [selectedConversation, setSelectedConversation] = useState<string>("");

// Conectar ao WebSocket quando o chat √© selecionado
useEffect(() => {
  if (selectedConversation) {
    const socket = new WebSocket(`wss://api.seusite.com/${selectedConversation}`);
    
    socket.onopen = () => {
      console.log(`WebSocket conectado para o chat ${selectedConversation}`);
    };

    socket.onmessage = (event) => {
      const data = JSON.parse(event.data);

      // Evitar duplica√ß√£o de mensagens com base no ID
      const exists = messages.some((m: any) => m.id === data.id);
      
      if (exists) return;

      // Se a mensagem for nova e para o chat ativo
      if (data.type === "newMessage" && data.phoneNumber === selectedConversation) {
        setMessages((prevMessages) => [
          ...prevMessages,
          {
            id: data.id,
            content: data.content,
            phoneNumber: data.phoneNumber,
            timestamp: new Date(data.timestamp),
            status: "received", // Marcar como "recebida"
          },
        ]);
      }

      // Se o contato estiver digitando, mostrar o status "Digitando..."
      if (data.type === "typing" && data.phoneNumber === selectedConversation) {
        console.log(`${data.phoneNumber} est√° digitando...`);
        // Aqui, voc√™ pode atualizar o estado para mostrar o status de digita√ß√£o
      }
    };

    socket.onclose = () => {
      console.log("WebSocket desconectado.");
    };

    setWebSocket(socket);

    // Cleanup na troca de conversa
    return () => socket.close();
  }
}, [selectedConversation]);

// Fun√ß√£o para enviar mensagens
const sendMessage = (message: string) => {
  if (webSocket && webSocket.readyState === WebSocket.OPEN) {
    const messageData = {
      type: "newMessage",
      phoneNumber: selectedConversation,
      content: message,
    };

    webSocket.send(JSON.stringify(messageData));

    // Adiciona a mensagem no estado com status "sending"
    setMessages((prevMessages) => [
      ...prevMessages,
      {
        content: message,
        phoneNumber: selectedConversation,
        timestamp: new Date(),
        status: "sending", // Marca como "enviando"
      },
    ]);
  }
};

// Componente para exibir as mensagens
const MessageInterface = () => {
  return (
    <div>
      <div className="chat-box">
        {messages.map((msg) => (
          <div key={msg.id} className={`message ${msg.status}`}>
            <p>{msg.content}</p>
            <span>{msg.timestamp.toLocaleTimeString()}</span>
            {msg.status === "sending" && <span className="reloginho">üïí</span>}
            {msg.status === "received" && <span className="checkmark">‚úî</span>}
          </div>
        ))}
      </div>

      <div className="message-input">
        <input
          type="text"
          placeholder="Digite sua mensagem..."
          onKeyPress={(e) => e.key === "Enter" && sendMessage(e.target.value)}
        />
        <button onClick={() => sendMessage("Teste de mensagem")}>Enviar</button>
      </div>
    </div>
  );
};

Instru√ß√µes Importantes:

    Estado: O estado messages √© atualizado sempre que uma nova mensagem √© recebida, ou quando uma mensagem √© enviada.

    WebSocket: O WebSocket escuta novas mensagens e atualiza o estado quando necess√°rio.

    Anti-duplica√ß√£o: A verifica√ß√£o message.id evita duplica√ß√£o de mensagens no estado.

    Mensagem Digitando: O estado de digita√ß√£o pode ser mostrado com um simples log ou um componente espec√≠fico para o status "digitando".

    Status da Mensagem: Cada mensagem pode ter tr√™s status poss√≠veis: sending, sent, received.

Testes

    Enviar uma mensagem: Verifique se a mensagem aparece imediatamente sem precisar atualizar ou trocar de conversa.

    Receber uma resposta: Pe√ßa a algu√©m para responder √† mensagem e veja se ela aparece instantaneamente no chat.

    Verifica√ß√£o do status "Digitando...": Teste o comportamento quando algu√©m estiver digitando.

Conclus√£o

Esse c√≥digo garantir√° que as mensagens apare√ßam em tempo real no chat sem a necessidade de atualiza√ß√£o manual ou troca de conversa. Ele tamb√©m mant√©m o comportamento de "digitando..." enquanto o contato estiver escrevendo.