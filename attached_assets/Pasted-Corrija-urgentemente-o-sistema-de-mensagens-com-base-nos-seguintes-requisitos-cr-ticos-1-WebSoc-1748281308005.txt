Corrija urgentemente o sistema de mensagens com base nos seguintes requisitos crÃ­ticos:
âœ… 1. WebSocket Evolution API em tempo real

Use o WebSocket da Evolution API no modo tradicional, pois cada conexÃ£o Ã© Ãºnica. A URL de conexÃ£o deve ser:

wss://evolution.lowfy.com.br/whatsapp_36_lowfy

Use transports: ['websocket']. Exemplo de conexÃ£o:

const socket = io('wss://evolution.lowfy.com.br/whatsapp_36_lowfy', {
  transports: ['websocket']
});

Escute o evento newMessage e repasse diretamente para o chat:

socket.on('newMessage', (data) => {
  console.log("ğŸŸ¢ Nova mensagem via WebSocket:", data);
  // Exibir diretamente no chat, se o nÃºmero corresponder ao contato aberto
});

âœ… 2. Corrigir mensagens duplicadas no chat

Evite adicionar mensagens jÃ¡ existentes no array. Compare por ID:

setMessages((prev) => {
  const exists = prev.some(m => m.id === newMsg.id);
  if (exists) return prev;
  return [...prev, newMsg];
});

Nunca adicione mensagem ao estado no envio local, espere ela retornar via WebSocket.
âœ… 3. Corrigir nÃ£o recebimento de mensagens do contato em tempo real

Garanta que:

    O webhook da Evolution API estÃ¡ configurado para sua URL /webhook

    O servidor Express redireciona POST /webhook para broadcast via WebSocket:

app.post("/webhook", (req, res) => {
  const msg = req.body;
  if (msg?.type === "message" && msg?.direction === "received") {
    io.emit("newMessage", msg); // enviar a todos os clientes
  }
  res.sendStatus(200);
});

âœ… 4. Reexibir mensagens em tempo real somente se o contato estiver aberto

Use activePhoneNumber para filtrar a exibiÃ§Ã£o:

if (msg.phoneNumber === activePhoneNumber) {
  setMessages(prev => [...prev, msg]);
}

âœ… 5. Encerrar conexÃ£o ao desmontar

useEffect(() => {
  const socket = io(...);

  return () => {
    socket.disconnect();
  };
}, []);

âœ… 6. Teste esperado apÃ³s a correÃ§Ã£o

    Enviar uma mensagem no frontend â†’ aparece no chat uma vez sÃ³

    Receber mensagem do contato â†’ aparece imediatamente no chat

    Alternar entre chats â†’ nÃ£o perde histÃ³rico

    Recarregar a pÃ¡gina â†’ mensagens anteriores aparecem corretamente

Corrija tudo acima com prioridade e garanta que o WebSocket funcione perfeitamente com a Evolution API no modo tradicional.
